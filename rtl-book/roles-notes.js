[{"content":"## Welcome to RTLBook\n\nThis is an interactive coding environment where you can explore the following libraries:\n\n| Name      | Docs |\n| ----------- | ----------- |\n| React      | [docs](https://reactjs.org/)       |\n| @testing-library/react   |  [docs](https://testing-library.com/docs/react-testing-library/intro/)        |\n| @testing-library/user-event |   [docs](https://testing-library.com/docs/user-event/intro)  |\n| @testing-library/react-hooks |  [docs](https://github.com/testing-library/react-hooks-testing-library)  |\n| @testing-library/jest-dom | [docs](https://github.com/testing-library/jest-dom#custom-matchers) |\n| expect |  [docs](https://jestjs.io/docs/expect)  |\n\nIn between each 'cell' there are buttons that can add in a new code editor or a text section.","type":"text","id":"12frm"},{"content":"import { render, screen } from '@testing-library/react';\n\nfunction RoleExample() {\n  return (\n    <div>\n      <a href=\"/\">Link</a>\n      <button>Button</button>\n      <footer>ContentInfo</footer>\n      <h1>Heading</h1>\n      <header>Banner</header>\n      <img alt=\"description\" /> Img\n      <input type=\"checkbox\" /> Checkbox\n      <input type=\"number\" /> SpinButton\n      <input type=\"radio\" /> Radio\n      <input type=\"text\" /> Textbox\n      <li>ListItem</li>\n      <ul>Listgroup</ul>\n    </div>\n  );\n}\n\nrender(<RoleExample/>)","type":"code","id":"d0ohp"},{"content":"- a = link\n- footer = contentinfo\n- header = banner\n- input type=number > spinbutton\n- li = listitem\n- ul = list","type":"text","id":"3p1if"},{"content":"test('can find elements by role', () => {\r\n  render(<RoleExample/>)\r\n\r\n  const roles = [\r\n    'link',\r\n    'button',\r\n    'contentinfo',\r\n    'heading',\r\n    'banner',\r\n    'img',\r\n    'checkbox'   ,\r\n    'spinbutton',\r\n    'radio',\r\n    'textbox',\r\n    'listitem',\r\n    'list', // (***) list\r\n  ]\r\n\r\n  for(let role of roles){\r\n    const el = screen.getByRole(role)\r\n\r\n    expect(el).toBeInTheDocument()\r\n  }\r\n\r\n\r\n\r\n\r\n})","type":"code","id":"mpdva"},{"content":"function AccessibleName() {\n  return (\n    <div>\n      <button>Submit</button>\n      <button>Cancel</button>\n      \n    </div>\n  );\n}\n\nrender(<AccessibleName />);","type":"code","id":"cdsbm"},{"content":"test('can select by accessible name', () => {\n  render(<AccessibleName />);\n\n  // (***) accessible name\n  const submitButton = screen.getByRole('button', { name: /submit/i });\n  const cancelButton = screen.getByRole('button', { name: /cancel/i });\n\n  expect(submitButton).toBeInTheDocument()\n  expect(cancelButton).toBeInTheDocument()\n});\n\n","type":"code","id":"vsz9n"},{"content":"function MoreNames() {\n  return (\n    <div>\n      <label htmlFor='email'>Email</label>\n      <input id='email' />\n\n      <label htmlFor='search'>Search</label>\n      <input id='search' />\n    </div>\n  );\n}\n\nrender(<MoreNames />);","type":"code","id":"9qjcz"},{"content":"test('show an email and search input', () => {\r\nrender(<MoreNames />);\r\n  \r\n  // (***)\r\n  const emailInput = screen.getByRole('textbox', {\r\n    name: /email/i\r\n  })\r\n  const searchInput = screen.getByRole('textbox', {\r\n    name: /search/i\r\n  })\r\n\r\n  expect(emailInput).toBeInTheDocument()\r\n  expect(searchInput).toBeInTheDocument()\r\n\r\n})","type":"code","id":"ncxjm"},{"content":" because it is not text > we need to use aria-label","type":"text","id":"ri2d7"},{"content":"function IconButtons() {\n  return (\n    <div>\n      <button>\n      \n        <svg aria-label='sign in' />\n      </button>\n      <button>\n        <svg aria-label='sign out' />\n      </button>\n    </div>\n  );\n}\n\nrender(<IconButtons/>)","type":"code","id":"b03di"},{"content":"test('find element based on label', () => {\r\n  render(<IconButtons/>)\r\n\r\n// (***) we need to use this fallback\r\n  const buttonOne = screen.getByRole('button', {\r\n    name: /sign in/i\r\n  })\r\n  const buttonTwo = screen.getByRole('button', {\r\n    name: /sign out/i\r\n  })\r\n\r\n  expect(buttonOne).toBeInTheDocument()\r\n  expect(buttonTwo).toBeInTheDocument()\r\n})","type":"code","id":"j1c0n"}]